To create a Jenkins Groovy function that returns the UTC time from the local system time (whatever time zone the system is using), you can use Java's java.time package, which supports time zone conversions easily. Hereâ€™s a function that converts the local time to UTC:

import java.time.*
import java.time.format.DateTimeFormatter

def getUtcTimeFromLocal() {
    // Get the current local time (system's default time zone)
    ZonedDateTime localTime = ZonedDateTime.now()

    // Convert it to UTC
    ZonedDateTime utcTime = localTime.withZoneSameInstant(ZoneId.of("UTC"))

    // Format the time to a readable format
    DateTimeFormatter formatter = DateTimeFormatter.ofPattern("yyyy-MM-dd HH:mm:ss")
    return utcTime.format(formatter)
}

// Example usage in Jenkins pipeline
pipeline {
    agent any
    stages {
        stage('Get UTC Time') {
            steps {
                script {
                    def utcTime = getUtcTimeFromLocal()
                    echo "Current UTC Time: ${utcTime}"
                }
            }
        }
    }
}

Explanation:

ZonedDateTime.now(): Gets the current local time based on the system's default time zone.

withZoneSameInstant(ZoneId.of("UTC")): Converts the local time to UTC.

DateTimeFormatter.ofPattern("yyyy-MM-dd HH:mm:ss"): Formats the date and time to a readable string in the format yyyy-MM-dd HH:mm:ss.


This function can be easily integrated into a Jenkins pipeline to get the current UTC time based on the local system time.

